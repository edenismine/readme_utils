# Insert your code here.
import click
import os
import pkg_resources
from typing import TextIO
from dataclasses import dataclass
import argparse
import json
import subprocess
import sys

# get resources
RESOURCES = pkg_resources.resource_listdir(__name__, 'data')

# configuration file
SETTINGS = "readme_settings.json"

# get paths relative to the script
THIS_PATH = os.path.realpath(__file__)
HOME_PATH = os.path.dirname(THIS_PATH)
DATA_DIR = os.path.join(HOME_PATH, 'data')


@click.command()
@click.argument('project', default=os.path.basename(os.getcwd()))
def init(project):
    """Initializes a buildable readme"""
    # accumulate filenames to latter add them to .gitignore
    ignores = ['# Ignore files generated by readme' + os.linesep]
    
    # log progress
    print(f"Initializing {project}")

    for file_name in os.listdir(DATA_DIR):
        # calculate new paths
        old_path = os.path.join(DATA_DIR, file_name)
        new_path = os.path.join(os.getcwd(), file_name)
        if file_name == 'readme_settings.json':
            with open(old_path, 'r') as f:
                settings = f.read().replace('PROJECT_NAME', project)
                open(new_path, 'w+').write(settings)
                print(f"Copyied {file_name}")
        else:
            if file_name != 'readme.md':
                ignores.append(file_name + os.linesep)
            with open(old_path, 'r') as f:
                open(new_path, 'w+').write(f.read())
                print(f"Copyied {file_name}")
    # add to .gitignore
    with open('.gitignore', 'w+') as f:
        will_append = []
        lines = f.read()
        for line in ignores:
            if not line in lines:
                will_append.append(line)
        f.writelines(will_append)


def pandoc_readme(settings: TextIO):
    """Extracts settings and actually executes the pandoc commands"""
    @dataclass
    class Options:
        project: str
        main: str
        header: str = ""
        metadata: str = ""
        bib: str = ""
        output: str = "readme.pdf"
        pandoc_home: str = "pandoc"

    def as_options(dct):
        """Options object hook"""
        try:
            if not "project" in dct or not "main" in dct:
                print(
                    f"Error: Invalid {SETTINGS}, 'main' and 'project' attributes must be set")
                quit()
            return Options(**dct)
        except Exception as e:
            print(e)
            print(f"Error: Invalid {SETTINGS}.")
            quit()

    # extract settings
    this = sys.argv[0]
    OPTIONS = json.load(settings, object_hook=as_options)

    # check if main file exists
    if not os.path.isfile(OPTIONS.main):
        print(
            f"Error: Missing main file {OPTIONS.main}.\n  {this}: script unsuccessful")
        quit()

    # check if metadata file exists
    if not os.path.isfile(OPTIONS.metadata):
        print(
            f"Warning: Missing file {OPTIONS.metadata}.\n  {this}: continuing without metadata.\n")

    # building options
    pandoc_home = OPTIONS.pandoc_home
    bibliography = f"--bibliography={OPTIONS.bib}"
    header = f"-H {OPTIONS.header}"
    target = f"-s {OPTIONS.main} {OPTIONS.metadata} -o {OPTIONS.output}"

    def refresh():
        """Refresh command"""
        print(f'Refreshing {OPTIONS.main}')
        format_command = f'{pandoc_home} {OPTIONS.main} -o {OPTIONS.main}'
        subprocess.call(format_command.split(' '))

    def build():
        """Build command"""
        print(f'Building {OPTIONS.output}')
        build_command = f'{pandoc_home} {bibliography} {header} {target}'
        subprocess.call(build_command.split(' '))

    # argparse parser
    parser = argparse.ArgumentParser(description='Readme utility.')
    parser.add_argument('--Refresh', const=refresh, default=build, dest='exe',
                        action='store_const',
                        help='indicates main file should be refreshed')
    args = parser.parse_args()
    args.exe()


def pdf():
    """Builds a pdf readme using the provided settings"""
    try:
        with open(SETTINGS) as settings:
            pandoc_readme(settings)
    except EnvironmentError:
        print(f"Missing {SETTINGS} file")
